name: CI - Lint, Type Safety, and Tests

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PNPM_CACHE_FOLDER: .pnpm-store

jobs:
  lint:
    name: ESLint & Prettier
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier
        run: npx prettier --check .

  typecheck:
    name: TypeScript type-check
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type-check
        run: npm --prefix apps/web run typecheck

  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: typecheck
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage (skips if script missing)
        run: |
          npm run test --if-present -- --coverage
          npm run test:unit --if-present -- --coverage

      - name: Ensure coverage directory exists
        run: mkdir -p coverage

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage
          if-no-files-found: warn

  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Apply SQL migrations
        run: |
          for migration in supabase/migrations/*.sql; do
            [ -f "$migration" ] || continue
            psql "$DATABASE_URL" -v "ON_ERROR_STOP=1" -f "$migration"
          done

      - name: Seed database if seed script exists
        run: |
          if [ -f supabase/seeds/demo_seed.sql ]; then
            psql "$DATABASE_URL" -v "ON_ERROR_STOP=1" -f supabase/seeds/demo_seed.sql
          fi

      - name: Run integration tests (skips if missing)
        run: |
          npm run test:integration --if-present -- --runInBand

      - name: Upload integration logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-logs
          path: test-results
          if-no-files-found: ignore

  rls-policies:
    name: Supabase RLS policy checks (${{ matrix.profile }})
    runs-on: ubuntu-latest
    needs: integration-tests
    strategy:
      fail-fast: false
      matrix:
        profile: [baseline, impersonation]
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
      POLICY_PROFILE: ${{ matrix.profile }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Apply SQL migrations
        run: |
          for migration in supabase/migrations/*.sql; do
            [ -f "$migration" ] || continue
            psql "$DATABASE_URL" -v "ON_ERROR_STOP=1" -f "$migration"
          done
          if [ -d "supabase/seeds" ]; then
            for seed in supabase/seeds/*.sql; do
              [ -f "$seed" ] || continue
              psql "$DATABASE_URL" -v "ON_ERROR_STOP=1" -f "$seed"
            done
          fi

      - name: Apply profile specific overrides
        run: |
          case "$POLICY_PROFILE" in
            impersonation)
              echo "Applying impersonation fixtures"
              if [ -f supabase/seeds/impersonation.sql ]; then
                psql "$DATABASE_URL" -v "ON_ERROR_STOP=1" -f supabase/seeds/impersonation.sql
              fi
              ;;
            *)
              echo "Using baseline RLS fixtures"
              ;;
          esac

      - name: Run policy suite
        run: bash scripts/test-policies.sh | tee rls-output.log

      - name: Upload RLS logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rls-${{ matrix.profile }}
          path: rls-output.log
          if-no-files-found: ignore

  build-artifacts:
    name: Build, OpenAPI, and Sentry release
    runs-on: ubuntu-latest
    needs:
      - lint
      - typecheck
      - unit-tests
      - integration-tests
      - rls-policies
    env:
      SENTRY_MONITOR_SLUG: ${{ secrets.SENTRY_MONITOR_SLUG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Generate OpenAPI specification
        run: |
          mkdir -p build/openapi
          npm run openapi:build --if-present
          npm run openapi:generate --if-present
          if [ -d docs ]; then
            find docs -maxdepth 5 -type f \( -name '*.yml' -o -name '*.yaml' -o -name '*.json' \) -print0 | xargs -0 -I{} cp {} build/openapi/ || true
          fi

      - name: Publish OpenAPI specification (if configured)
        run: |
          npm run openapi:publish --if-present

      - name: Upload OpenAPI artifact
        uses: actions/upload-artifact@v4
        with:
          name: openapi-spec
          path: build/openapi
          if-no-files-found: warn

      - name: Upload Next.js build artifact
        uses: actions/upload-artifact@v4
        with:
          name: next-build
          path: apps/web/.next
          if-no-files-found: warn

      - name: Create Sentry release
        if: ${{ secrets.SENTRY_AUTH_TOKEN != '' && secrets.SENTRY_ORG != '' && secrets.SENTRY_PROJECT != '' }}
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}
          version: ${{ github.sha }}
          set_commits: auto
          sourcemaps: |
            apps/web/.next
          finalize: true

      - name: Notify Sentry monitor (optional)
        if: ${{ secrets.SENTRY_AUTH_TOKEN != '' && env.SENTRY_MONITOR_SLUG && env.SENTRY_MONITOR_SLUG != '' }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          npx sentry-cli monitor check-in --monitor "$SENTRY_MONITOR_SLUG" --status ok --environment ${{ github.ref_name }}
